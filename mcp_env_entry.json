{
  "env": "import asyncio\nimport logging\nfrom dataclasses import dataclass, field\nfrom typing import Any, Dict, List, Optional\n\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass MCPTool:\n    name: str\n    description: str\n    parameters: Dict[str, Any] = field(default_factory=dict)\n\nMOCK_TOOLS: List[MCPTool] = [\n    MCPTool(\n        name=\"mock_tool_one\",\n        description=\"A mock tool for demonstration\",\n        parameters={\n            \"param1\": {\"type\": \"string\", \"description\": \"A string parameter\"},\n            \"param2\": {\"type\": \"number\", \"description\": \"A numeric parameter\"}\n        }\n    ),\n    MCPTool(\n        name=\"mock_tool_two\",\n        description=\"Another mock tool\",\n        parameters={\n            \"paramA\": {\"type\": \"boolean\", \"description\": \"A boolean parameter\"},\n            \"paramB\": {\"type\": \"string\", \"description\": \"Another string parameter\"}\n        }\n    ),\n    MCPTool(\n        name=\"mock_tool_three\",\n        description=\"Third mock tool\",\n        parameters={}\n    )\n]\n\nasync def get_available_tools(workflow_request: Optional[str] = None) -> List[Dict[str, Any]]:\n    logger.debug(\"Fetching available tools with workflow_request=%s\", workflow_request)\n    return [tool.__dict__ for tool in MOCK_TOOLS]\n\nasync def execute_tool(tool_name: str, parameters: Dict[str, Any]) -> Dict[str, Any]:\n    logger.debug(\"Executing tool: %s with parameters: %s\", tool_name, parameters)\n    simulated_result = {f\"result_of_{tool_name}\": \"success\"}\n    return simulated_result\n",
  "func_schemas": "{\n    \"get_available_tools\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"workflow_request\": {\n                \"type\": [\"string\", \"null\"],\n                \"description\": \"Optional workflow request specifier\"\n            }\n        },\n        \"required\": [],\n        \"additionalProperties\": false\n    },\n    \"execute_tool\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"tool_name\": {\n                \"type\": \"string\",\n                \"description\": \"The name of the tool to execute\"\n            },\n            \"parameters\": {\n                \"type\": \"object\",\n                \"description\": \"Parameters to be passed to the tool\"\n            }\n        },\n        \"required\": [\"tool_name\", \"parameters\"],\n        \"additionalProperties\": false\n    }\n}\n"
}