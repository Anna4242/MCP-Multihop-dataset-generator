{
  "env": "from dataclasses import dataclass\nfrom typing import Dict, Any, List, Optional\nimport asyncio\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\n@dataclass\nclass MCPTool:\n    name: str\n    description: str\n    parameters: Dict[str, Any]\n\nTOOLS = [\n  MCPTool('browser_close', 'Close the page', {}),\n  MCPTool('browser_resize', 'Resize the browser window', {'width': {'description': 'Width of the browser window', 'title': 'Width', 'type': 'number'}, 'height': {'description': 'Height of the browser window', 'title': 'Height', 'type': 'number'}}),\n  MCPTool('browser_console_messages', 'Returns all console messages', {}),\n  MCPTool('browser_handle_dialog', 'Handle a dialog', {'accept': {'description': 'Whether to accept the dialog.', 'title': 'Accept', 'type': 'boolean'}, 'promptText': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'The text of the prompt in case of a prompt dialog.', 'title': 'Prompttext'}}),\n  MCPTool('browser_file_upload', 'Upload one or multiple files', {'paths': {'description': 'The absolute paths to the files to upload. Can be a single file or multiple files.', 'items': {'type': 'string'}, 'title': 'Paths', 'type': 'array'}}),\n  MCPTool('browser_install', 'Install the browser specified in the config. Call this if you get an error about the browser not being installed.', {}),\n  MCPTool('browser_press_key', 'Press a key on the keyboard', {'key': {'description': 'Name of the key to press or a character to generate, such as `ArrowLeft` or `a`', 'title': 'Key', 'type': 'string'}}),\n  MCPTool('browser_navigate', 'Navigate to a URL', {'url': {'description': 'The URL to navigate to', 'title': 'Url', 'type': 'string'}}),\n  MCPTool('browser_navigate_back', 'Go back to the previous page', {}),\n  MCPTool('browser_navigate_forward', 'Go forward to the next page', {}),\n  MCPTool('browser_network_requests', 'Returns all network requests since loading the page', {}),\n  MCPTool('browser_pdf_save', 'Save page as PDF', {'filename': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'File name to save the pdf to. Defaults to `page-{timestamp}.pdf` if not specified.', 'title': 'Filename'}}),\n  MCPTool('browser_take_screenshot', 'Take a screenshot of the current page. You can\\'t perform actions based on the screenshot, use browser_snapshot for actions.', {'raw': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'description': 'Whether to return without compression (in PNG format). Default is false, which returns a JPEG image.', 'title': 'Raw'}, 'filename': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'File name to save the screenshot to. Defaults to `page-{timestamp}.{png|jpeg}` if not specified.', 'title': 'Filename'}, 'element': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Human-readable element description used to obtain permission to screenshot the element. If not provided, the screenshot will be taken of viewport. If element is provided, ref must be provided too.', 'title': 'Element'}, 'ref': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Exact target element reference from the page snapshot. If not provided, the screenshot will be taken of viewport. If ref is provided, element must be provided too.', 'title': 'Ref'}}),\n  MCPTool('browser_snapshot', 'Capture accessibility snapshot of the current page, this is better than screenshot', {}),\n  MCPTool('browser_click', 'Perform click on a web page', {'element': {'description': 'Human-readable element description used to obtain permission to interact with the element', 'title': 'Element', 'type': 'string'}, 'ref': {'description': 'Exact target element reference from the page snapshot', 'title': 'Ref', 'type': 'string'}}),\n  MCPTool('browser_drag', 'Perform drag and drop between two elements', {'startElement': {'description': 'Human-readable source element description used to obtain the permission to interact with the element', 'title': 'Startelement', 'type': 'string'}, 'startRef': {'description': 'Exact source element reference from the page snapshot', 'title': 'Startref', 'type': 'string'}, 'endElement': {'description': 'Human-readable target element description used to obtain the permission to interact with the element', 'title': 'Endelement', 'type': 'string'}, 'endRef': {'description': 'Exact target element reference from the page snapshot', 'title': 'Endref', 'type': 'string'}}),\n  MCPTool('browser_hover', 'Hover over element on page', {'element': {'description': 'Human-readable element description used to obtain permission to interact with the element', 'title': 'Element', 'type': 'string'}, 'ref': {'description': 'Exact target element reference from the page snapshot', 'title': 'Ref', 'type': 'string'}}),\n  MCPTool('browser_type', 'Type text into editable element', {'element': {'description': 'Human-readable element description used to obtain permission to interact with the element', 'title': 'Element', 'type': 'string'}, 'ref': {'description': 'Exact target element reference from the page snapshot', 'title': 'Ref', 'type': 'string'}, 'text': {'description': 'Text to type into the element', 'title': 'Text', 'type': 'string'}, 'submit': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'description': 'Whether to submit entered text (press Enter after)', 'title': 'Submit'}, 'slowly': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'default': None, 'description': 'Whether to type one character at a time. Useful for triggering key handlers in the page. By default entire text is filled in at once.', 'title': 'Slowly'}}),\n  MCPTool('browser_select_option', 'Select an option in a dropdown', {'element': {'description': 'Human-readable element description used to obtain permission to interact with the element', 'title': 'Element', 'type': 'string'}, 'ref': {'description': 'Exact target element reference from the page snapshot', 'title': 'Ref', 'type': 'string'}, 'values': {'description': 'Array of values to select in the dropdown. This can be a single value or multiple values.', 'items': {'type': 'string'}, 'title': 'Values', 'type': 'array'}}),\n  MCPTool('browser_tab_list', 'List browser tabs', {}),\n  MCPTool('browser_tab_new', 'Open a new tab', {'url': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'The URL to navigate to in the new tab. If not provided, the new tab will be blank.', 'title': 'Url'}}),\n  MCPTool('browser_tab_select', 'Select a tab by index', {'index': {'description': 'The index of the tab to select', 'title': 'Index', 'type': 'number'}}),\n  MCPTool('browser_tab_close', 'Close a tab', {'index': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'default': None, 'description': 'The index of the tab to close. Closes current tab if not provided.', 'title': 'Index'}}),\n  MCPTool('browser_generate_playwright_test', 'Generate a Playwright test for given scenario', {'name': {'description': 'The name of the test', 'title': 'Name', 'type': 'string'}, 'description': {'description': 'The description of the test', 'title': 'Description', 'type': 'string'}, 'steps': {'description': 'The steps of the test', 'items': {'type': 'string'}, 'title': 'Steps', 'type': 'array'}}),\n  MCPTool('browser_wait_for', 'Wait for text to appear or disappear or a specified time to pass', {'time': {'anyOf': [{'type': 'number'}, {'type': 'null'}], 'default': None, 'description': 'The time to wait in seconds', 'title': 'Time'}, 'text': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'The text to wait for', 'title': 'Text'}, 'textGone': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'The text to wait for to disappear', 'title': 'Textgone'}})\n]\n\nasync def get_available_tools(workflow_request: Optional[str] = None) -> List[MCPTool]:\n    logging.debug('Fetching available tools.')\n    return TOOLS\n\nasync def execute_tool(tool_name: str, parameters: Dict[str, Any]) -> Dict[str, Any]:\n    logging.debug('Executing tool: %s with parameters: %s', tool_name, parameters)\n    # Mock tool execution\n    return {'status': 'success', 'tool_name': tool_name, 'parameters': parameters}\n\n# Example usage\n# asyncio.run(execute_tool('browser_close', {}))\n",
  "func_schemas": "{\n  \"get_available_tools\": {\n    \"description\": \"Fetch available tools optionally filtered by a workflow request.\",\n    \"type\": \"function\",\n    \"parameters\": [\n      {\n        \"name\": \"workflow_request\",\n        \"type\": \"string\",\n        \"optional\": true\n      }\n    ],\n    \"returns\": \"List[MCPTool]\"\n  },\n  \"execute_tool\": {\n    \"description\": \"Execute a specified tool with given parameters.\",\n    \"type\": \"function\",\n    \"parameters\": [\n      {\n        \"name\": \"tool_name\",\n        \"type\": \"string\"\n      },\n      {\n        \"name\": \"parameters\",\n        \"type\": \"Dict[str, Any]\"\n      }\n    ],\n    \"returns\": \"Dict[str, Any]\"\n  }\n}\n"
}